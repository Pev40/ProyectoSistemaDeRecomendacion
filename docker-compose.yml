version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=movielens_32m
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - recommendation-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - recommendation-network
    restart: unless-stopped

  # Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - recommendation-network
    restart: unless-stopped

  # TorchServe
  torchserve:
    build:
      context: .
      dockerfile: Dockerfile.torchserve
    container_name: torchserve
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
    volumes:
      - ./modelo:/app/modelo
      - ./model-store:/home/model-server/model-store
    environment:
      - TS_CONFIG_FILE=/home/model-server/config.properties
    networks:
      - recommendation-network
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis

  # API de recomendación
  recommendation-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation-api
    ports:
      - "8000:8000"
    volumes:
      - ./modelo:/app/modelo
      - ./embeddings:/app/embeddings
      - ./faiss_index:/app/faiss_index
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/movielens_32m?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TORCHSERVE_HOST=torchserve
      - TORCHSERVE_PORT=8080
      - MODEL_PATH=/app/modelo/pre_trained/gsasrec-ml1m-step_86064-t_0.75-negs_256-emb_128-dropout_0.5-metric_0.1974453226738962.pt
    depends_on:
      - mongodb
      - redis
      - qdrant
      - torchserve
    networks:
      - recommendation-network
    restart: unless-stopped
    command: ["python", "backend/api_v2.py"]

  # Servicio de sincronización
  sync-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sync-service
    volumes:
      - ./modelo:/app/modelo
      - ./embeddings:/app/embeddings
      - ./faiss_index:/app/faiss_index
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/movielens_32m?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TORCHSERVE_HOST=torchserve
      - TORCHSERVE_PORT=8080
      - MODEL_PATH=/app/modelo/pre_trained/gsasrec-ml1m-step_86064-t_0.75-negs_256-emb_128-dropout_0.5-metric_0.1974453226738962.pt
      - SYNC_INTERVAL_HOURS=6
    depends_on:
      - mongodb
      - redis
      - qdrant
      - torchserve
    networks:
      - recommendation-network
    restart: unless-stopped
    command: ["python", "backend/sync_service.py"]

  # Celery Worker para tareas en background
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    volumes:
      - ./modelo:/app/modelo
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/movielens_32m?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - recommendation-network
    restart: unless-stopped
    command: ["celery", "-A", "backend.celery_app", "worker", "--loglevel=info"]

  # Flower para monitoreo de Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    networks:
      - recommendation-network
    restart: unless-stopped
    command: ["celery", "-A", "backend.celery_app", "flower", "--port=5555"]

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  qdrant_storage:
    driver: local

networks:
  recommendation-network:
    driver: bridge 